local Input = CS.UnityEngine.Input
local KeyCode = CS.UnityEngine.KeyCode
require "Core.Class"
local Config = require "LuaHelper.ConfigHelper"
local LuaDebugHelper = require "LuaHelper.LuaDebugHelper"
_G.CSGlobal = CS.Global
_G.Log = require "LuaHelper.Log"
_G.NetManager = require "Manager.NetManager"
_G.Global = require "Global"
local GameState = require "GameState.GameState"

local GameManager = {}

function GameManager.InitData()
    LuaDebugHelper.InitData()
    Config.LoadConfig()

    -- if Config.isEditor then
    --     LuaDebugHelper.InitData()
    -- end
    ObjectManager.InitData()
    ObjectManager.CreateSingleObj("Core.Event", "EventManager")
    ObjectManager.CreateSingleObj("Manager.NetManager", "NetManager")
    ObjectManager.CreateSingleObj("Manager.TimeManager", "TimeManager")

    ObjectManager.CreateSingleObj("Manager.UIManager", "UIManager")
    ObjectManager.CreateSingleObj("Manager.SceneManager", "SceneManager")


    ObjectManager.CreateSingleObj("GameData.LoginData", "LoginData")
    ObjectManager.CreateSingleObj("Manager.TimeManager", "TimeManager")

    -- NetManager.InitData()
    -- Global.InitData()
    -- GameManager.Global = Global
    -- GameManager.RegEvents()
    -- GameManager.InitManagers()

    -- CSGlobal.RegProto2(NetManager.RecServer)

    
end

--注册事件
function GameManager.RegEvents()
    GameState.RegEvents()
end

--所有Manager的初始化
function GameManager.InitManagers()
    -- ObjectManager.InitData()
    -- UIManager.InitData()
    -- ActivityManager.InitData()

   
end

function GameManager.Update(deltaTime, realtimeSinceStartup, frameCount, severtime)
    -- print("在update" .. realtimeSinceStartup)
    if Config.isEditor then
        LuaDebugHelper.Update()
    end

    Global.Update(deltaTime, realtimeSinceStartup, frameCount, severtime)
end

function GameManager.RateUpdate()
    if Config.isEditor then
        LuaDebugHelper.RateUpdate()
    end
end

return GameManager
