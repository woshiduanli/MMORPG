local require = require
local CommonUtil = require "Util.CommonUtil"
require "core.Class"
local CObject = class()
local Timer = require("util.Timer")
local ObjectManager = require("Manager.ObjectManager")
-- local ObjectManager = require("Manager.ObjectManager")

function CObject:InitData(...)
end

function CObject:RegEvents()
end

function CObject:ctor(...)
    self.disposed = false
    -- 所有数据对象和管理器对象的管理类
    self.objMgr = ObjectManager
    -- 存放事件及回调信息
    self.callbacks = {}
    -- timers
    self.timers = {}
    self:InitData(...)
    self:RegEvents()
end

function CObject:OnDispose()
end

function CObject:Dispose()
    self.disposed = true
    -- 销毁事件
    for _, v in ipairs(self.callbacks) do
        self.objMgr.GetSingleObj("EventManager").UnregEvent(v.eid, v.func)
    end

    --销毁所有的计时器
    if self.timers then
        for _, v in ipairs(self.timers) do
            if (v ~= nil) then
                v.destory = true
            end
        end
    end

    self.timers = {}
    self.callbacks = nil
    self.class = nil

    self:OnDispose()
end

function CObject:UnRegEvent(eid)
    local index = -1
    for _, v in ipairs(self.callbacks) do
        if (v.eid == eid) then
            self.objMgr.GetSingleObj("EventManager").UnregEvent(v.eid, v.func)
            index = _
        end
    end

    if index ~= -1 then
        table.remove(self.callbacks, index)
    end
end

function CObject:GetSingleObj(snmae)
    return self.objMgr.GetSingleObj(snmae)
end

function CObject:RegProto(protoName, cb)
    self.objMgr.GetSingleObj("NetManager").RegProto(require("Proto." .. protoName).New(), cb)
end

-- 注册事件
function CObject:RegEvent(evt, cb)
    if disposed then
        return
    end
    if evt == nil or cb == nil then
        return
    end
    for _, v in ipairs(self.callbacks) do
        if (v.eid == evt) then
            return
        end
    end

    self.objMgr.GetSingleObj("EventManager"):RegEvent(evt, cb)
    table.insert(self.callbacks, {eid = evt, func = cb})
end

-- 分发事件
function CObject:FireEvent(evt, ...)
    if disposed then
        return
    end

    local s = ...
    self.objMgr.GetSingleObj("EventManager"):FireEvent(evt, ...)
end

function CObject:GetSelfFunc(func)
    return CommonUtil.GetSelfFunc(self, func)
end

--[[
	@interval: 间隔时间
	@PrcessCount: 循环次数，0为无限循环
	@return [util.Timer#Timer]
--]]
function CObject:AddTimer(func, IsEveryFrame, interval, PrcessCount)
    --@RefType [util.Timer#Timer]
    local timer = Timer.new(func, IsEveryFrame, interval, PrcessCount)
    self.objMgr.GetSingleObj("TimeManager"):AddTimer(timer)
    table.insert(self.timers, timer)
    return timer
end

-- 计算器只能从这里销毁和暂停
function CObject:DestoryTimer(timer)
    table.removevalue(self.timers, timer)
    timer.destory = true
end

function CObject:IsPauseTime(timer, isPause)
    if ((isPause == nil) or (isPause == true)) then
        timer.pause = true
    else
        timer.pause = false
    end
end

return CObject
